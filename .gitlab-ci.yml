image: alpine:3.12

stages:
  - build
  - test
  - artefacts
  - release

variables:
  DOCKER_BUILD: docker image build --pull
  DOCKER_BUILDKIT: "1"
  DOCKER_CLI_EXPERIMENTAL: enabled
  DOCKER_HOST: "tcp://dind:2375/"
  GIT_FETCH_EXTRA_FLAGS: --tags
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_TAGS: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_IID}
  DOCKER_IMAGE: registry.gitlab.com/makersquad/oss/harp
  DOCKER_IMAGE_DEV: registry.gitlab.com/makersquad/oss/harp
  CI_REGISTRY_PASSWORD: ${CI_JOB_TOKEN}
  KUBERNETES_CPU_REQUEST: "0.5"
  KUBERNETES_CPU_LIMIT: "1"

.DockerBuild: &DockerBuild
  image: docker:24.0.6
  stage: build
  before_script:
    - apk add git make py3-pip py3-jinja2 bash
    - pip install 'poetry==1.7.1'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  retry:
    max: 2
    when: runner_system_failure

build:runtime:
  <<: *DockerBuild

  script:
    - bash bin/sandbox make buildc pushc

build:dev:
  <<: *DockerBuild

  variables:
    DOCKER_TAGS_SUFFIX: -dev

  script:
    - bash bin/sandbox make buildc-dev pushc-dev

.TestBase: &TestBase
  needs: ["build:dev"]
  image: ${DOCKER_IMAGE}:${DOCKER_TAGS}-dev
  stage: test
  variables: &TestBaseVariables
    GIT_STRATEGY: none
  before_script:
    - 'export DOCKER_HOST=tcp://$(curl -sSk -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" "https://kubernetes.default.svc/api/v1/namespaces/cicd/pods" | jq -r ''.items[] | select(.metadata.labels.app=="dind") | .status.podIP''):2375/'
    - 'echo DOCKER_HOST=$DOCKER_HOST'

.TestBackend: &TestBackend
  <<: *TestBase
  variables: &TestBackendVariables
    <<: *TestBaseVariables
    PYTEST: /opt/venv/bin/pytest
    PYTEST_OPTIONS: "-m 'not subprocess'"
  script:
    - (cd /opt/harp/src; poetry run make test-backend)

.TestFrontend: &TestFrontend
  <<: *TestBase
  variables: &TestFrontendVariables
    <<: *TestBaseVariables

test:backend:core:
  <<: *TestBackend
  variables:
    <<: *TestBackendVariables
    PYTEST_TARGETS: "harp"

test:backend:apps:
  <<: *TestBackend
  variables:
    <<: *TestBackendVariables
    PYTEST_TARGETS: "harp_apps"
    KUBERNETES_CPU_REQUEST: "1"
    KUBERNETES_CPU_LIMIT: "2"

test:backend:e2e:
  <<: *TestBackend
  variables:
    <<: *TestBackendVariables
    PYTEST_TARGETS: "tests"
    PYTEST_CPUS: "1"

test:frontend:unit:
  <<: *TestFrontend
  variables:
    <<: *TestFrontendVariables
    KUBERNETES_CPU_REQUEST: "2"
    KUBERNETES_CPU_LIMIT: "3"
  script:
    - (cd /opt/harp/src/harp_apps/dashboard/frontend; pnpm test:unit)

#test:frontend:browser:
#  <<: *TestFrontend
#  variables:
#    <<: *TestFrontendVariables
#  script:
#    - (cd /opt/harp/src/harp_apps/dashboard/frontend; pnpm test:browser)
#
#test:frontend:visual:
#  <<: *TestFrontend
#  variables:
#    <<: *TestFrontendVariables
#  script:
#    - (cd /opt/harp/src; bin/runc_visualtests pnpm test:ui:dev)

doc:html:
  needs: ["build:dev"]
  image: ${DOCKER_IMAGE}:${DOCKER_TAGS}-dev
  stage: artefacts
  variables:
    GIT_STRATEGY: none
    SPHINXBUILD: /opt/venv/bin/sphinx-build
  script:
    - (cd /opt/harp/src/docs; make html)
    - mv /opt/harp/src/docs/_build/html harp-doc
  artifacts:
    name: harp-doc
    expire_in: 1 month
    paths:
      - "harp-doc/*"

storybook:
  needs: ["build:dev"]
  image: ${DOCKER_IMAGE}:${DOCKER_TAGS}-dev
  stage: artefacts
  variables:
    GIT_STRATEGY: none
  script:
    - (cd /opt/harp/src/harp_apps/dashboard/frontend; pnpm ui:build)
    - mv /opt/harp/src//harp_apps/dashboard/frontend/build harp-ui
  artifacts:
    name: harp-ui
    expire_in: 1 month
    paths:
      - "harp-ui/*"

release:
  image: docker:24.0.6
  needs:
    - "build:runtime"
    - "test:backend:core"
    - "test:backend:apps"
    - "test:backend:e2e"
    - "test:frontend:unit"
    # - "test:frontend:browser"
    # - "test:frontend:visual"
  stage: release
  only:
    - /^[0-9]+\.[0-9]+$/
    - tags
  variables:
    GIT_STRATEGY: none
    SOURCE_IMAGE: registry.gitlab.com/makersquad/oss/harp:${DOCKER_TAGS}
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull ${SOURCE_IMAGE}
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD docker.io
  script:
    - echo "CI_COMMIT_BRANCH = ${CI_COMMIT_BRANCH}"
    - echo "CI_COMMIT_TAG = ${CI_COMMIT_TAG}"
    - if [ -n "$CI_COMMIT_BRANCH" ]; then
        docker tag ${SOURCE_IMAGE} makersquad/harp-proxy:${CI_COMMIT_BRANCH}-git;
        docker push makersquad/harp-proxy:${CI_COMMIT_BRANCH}-git;
      fi
    - if [ -n "$CI_COMMIT_TAG" ]; then
        docker tag ${SOURCE_IMAGE} makersquad/harp-proxy:${CI_COMMIT_TAG};
        docker push makersquad/harp-proxy:${CI_COMMIT_TAG};
      fi
    - if [ -n "$CI_COMMIT_TAG" ]; then
        if echo "$CI_COMMIT_TAG" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          docker tag ${SOURCE_IMAGE} makersquad/harp-proxy:latest;
          docker push makersquad/harp-proxy:latest;
        fi;
      fi
  retry:
    max: 2
    when: runner_system_failure
